// Copyright 2021 Arnaud Becheler    <abechele@umich.edu>

/***********************************************************************                                                                         *
* This program is free software; you can redistribute it and/or modify *
* it under the terms of the GNU General Public License as published by *
* the Free Software Foundation; either version 2 of the License, or    *
* (at your option) any later version.                                  *
*                                                                      *
***************************************************************************/

#ifndef __OCCUPANCY_SPECTRUM_SUPPORT_H_INCLUDED__
#define __OCCUPANCY_SPECTRUM_SUPPORT_H_INCLUDED__

#include "OccupancySpectrum.h"

#include <vector>
#include <utility>

namespace quetzal
{
  namespace coalescence
  {
    namespace occupancy_spectrum
    {
      ///
      /// @brief Generate all the possible occupancy spectrums resulting from throwing  \f$n\f$ balls (the number of coalescing gene copies) into  \f$m\f$ urns (the number of parents).
      ///
      class Support
      {
      public:
        /// @typedef Type of the occupancy spectrums generated by the algorithm
        using occupancy_spectrum_type = OccupancySpectrum;
        ///
        /// @brief Generate all possible configurations
        ///
        /// @param n number of balls to throw
        /// @param m number of urns
        /// @param op unary operation function object that will be applied to handle
        ///           generated spectra. The signature
        ///           of the function should be equivalent to the following:
        ///           `Ret fun(Support::occupancy_spectrum_type && s);`
        ///
        template<class UnaryOperation>
        static void generate(int n, int m, UnaryOperation op)
        {
          std::vector<int> M_j(n+1);
          f(n, m, n, M_j, op);
        }
      private:
        ///
        /// @brief recursive function passing the generate spectrums to a callback
        ///
        /// @param n the number of balls to throw (the number of coalescing gene copies)
        /// @param m the number of urns (the number of parents)
        /// @param j_max number of balls in the urn with highest occcupancy number
        template<class Callback>
        static void f(int n, int m, int j_max, std::vector<int>& v, Callback callback)
        {
          if(m == 0 && n == 0)
          {
            // problem solved
            callback(OccupancySpectrum(std::move(v), m, n));
            return;
          }
          if (m != 0)
          {
            if (n == 0) {
              auto copy = v;
              copy[0] = m; // here n = 0 et m = 0, so problem is solved
              callback(OccupancySpectrum(std::move(copy), m, n));
              return;
            } else {
              if( j_max > 0){
                // vertical descent
                for(int i = n/j_max; i >= 1; --i)
                {
                  auto copy = v;
                  copy[j_max] = i;
                  if(m >= i){
                    int balls_left = n - i*j_max;
                    if(balls_left < j_max){
                      f( balls_left, m-i, balls_left, copy, callback);
                    }else {
                      f( balls_left, m-i, j_max-1, copy, callback);
                    }
                  }
                }
              }
            }
          }
          // horizontal descent
          if( j_max == 0 && n > 0 )
          {
            // not solvable
            return;
          }
          auto copy = v;
          copy[j_max] = 0;
          f(n, m, j_max-1, copy, callback);
        }
      }; // end class Support
    } // namespace occupancy_spectrum
  } // namespace coalescence
} // namespace quetzal

#endif
